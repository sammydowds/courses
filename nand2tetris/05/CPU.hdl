// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 **/

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //OP Code
    Not(in=instruction[15], out=notOpCode);

    //Pre A register processing, selecting whether to pass instruction or ALU output to A register
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=opCodeOut);

    //A register - A register is loaded if it is an A instruction, or a C-instruction with destination of A
    And(a=instruction[15], b=instruction[5], out=cInstAreg);
    Or(a=cInstAreg, b=notOpCode, out=loadA);
    ARegister(in=opCodeOut, load=loadA, out=regA, out[0..14]=addressM[0..14], out=pcAaddress);

    //D register - loaded if C instruction and D is destination
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=regD);

    //ALU preprocessing - if C instruction take in M, if A instruction take in A address recently updated (us a in the instruction)
    Mux16(a=regA, b=inM, sel=instruction[12], out=aEquation);

    //ALU of the CPU
    ALU(x=regD, y=aEquation, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=outZero, ng=outNeg, out=aluOut, out=outM);

    //Should Write M?
    And(a=instruction[15], b=instruction[3], out=writeM);

    //Jump conditions are made up by combo of JLT, JEQ, JGT
    And(a=outNeg, b=instruction[2], out=jlt); //less than zero
    And(a=outZero, b=instruction[1], out=jeq); //equal to zero
    Or(a=outNeg, b=outZero, out=zeroOrneg);
    Not(in=zeroOrneg, out=positive);
    And(a=positive, b=instruction[0], out=jgt);

    //Main JMP check
    Or(a=jlt, b=jeq, out=jle);
    Or(a=jle, b=jgt, out=jumpA);

    //check if A instruction
    And(a=instruction[15], b=jumpA, out=jumpCond);
    Not(in=jumpCond, out=notJumpcond);
    PC(in=pcAaddress, reset=reset, load=jumpCond, inc=notJumpcond, out[0..14]=pc);


}
